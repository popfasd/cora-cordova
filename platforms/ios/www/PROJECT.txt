Project
=======

This document is written using [markdown][] syntax.

[markdown]: http://daringfireball.net/projects/markdown/

Git Branching Model
-------------------

See [nvie.com][] for more about this model.

[nvie.com]: http://nvie.com/posts/a-successful-git-branching-model

The `master` branch is for tagged releases only. The `develop` branch is where
all changes are merged into. A `release` branch is forked from `develop` to
prepare a new release. Once the release is ready, the release branch is merged
into `master` and tagged with a release number.

### Adding a new feature

To add a feature, create a new branch off of `develop` named after the feature.
So for feature "foo", create a branch called `feature-foo`. When the feature
has been implemented, merge the changes back into `develop` and delete the
`feature-foo` branch.

    # git checkout -b feature-foo develop
    Develop feature, commit changes...
    # git checkout develop
    # git merge --no-ff feature-foo
    # git branch -d feature-foo

### Preparing a release

When `develop` is in a state that is ready for a release, a release branch must
be created from `develop`. Any final changes that need to be made to prepare
the release (change version numbers etc...) must be made on the release branch.
Release branches are named after the version, so a release branch for version
1.2 would be called `release-1.2`. When the release is ready, it is merged into
`master` and back in `develop`. The release branch shouldn't be deleted until
the release is no longer supported, as bug fixes must be made on the release
branch.

    # git checkout -b release-1.2 develop
    Prepare release, commit changes...
    # git checkout master
    # git merge --no-ff release-1.2
    # git tag -a -m 'Release 1.2' 1.2
    # git checkout develop
    # git merge --no-ff release-1.2

### Hotfixes

Applying bug fixes (hotfixes_ to a supported release requires creating a
branch from `master`. The name of the branch is the incremented version of the
bug release. To create a hotfix for the 1.2 release, a `master` is branched to
create `hotfix-1.2.1`. When the hotfix is finished, it must be merged back into
`master` as well as merged into `develop` to make sure the bug is fixed for the
1.3 release. After merging, the hotfix branch can be deleted.

    # git checkout -b hotfix-1.2.1
    Make changes, update version numbers etc..., commit changes
    # git checkout master
    # git merge --no-ff hotfix-1.2.1
    # git tag -a -m 'Release 1.2.1' 1.2.1
    # git checkout develop
    # git merge --no-ff hotfix-1.2.1
    # git branch -d hotfix-1.2.1

Preparing a release
-------------------

* Create a release branch
* Change "@version" in assets/js/cora.js
* Change version on #options-about page in index.html
* Uncomment "console.log = function () {};" in assets/js/cora.js
* Update cora.appcache with any new files and increase serial

Cora website
------------

The site lives in 1/var/www/cora1 on the webserver. It uses some PHP so that
pages can be written in markdown. The main site content is in the `pages/`
directory. The `app/` directory is the live stable version of the app. The
`dev/` directory contains the nightly snapshop of the app (automatically
updated via cron using `~mferris/bin/cora-dev-update`).